apiVersion: v1
kind: ConfigMap
metadata:
  name: stein-redis-ha-configmap
  labels:
    app: stein
    app-group: redis
    component: config
    tier: data
data:
  sentinel.template.conf: |
    sentinel monitor mymaster %MASTER% 6379 2
    sentinel down-after-milliseconds mymaster 5000
    sentinel failover-timeout mymaster 60000
    sentinel parallel-syncs mymaster 1
    sentinel auth-pass mymaster %PASSWORD%
    protected-mode no
    port 26379
  redis.template.conf: |
    ################################## NETWORK #####################################
    protected-mode no
    port 6379

    # TCP listen() backlog.
    tcp-backlog 511

    # Unix socket.
    timeout 0

    # TCP keepalive.
    tcp-keepalive 300

    ################################# GENERAL #####################################

    daemonize no
    supervised no
    loglevel notice
    logfile ""
    databases 128

    ################################ SNAPSHOTTING  ################################
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data

    ################################# REPLICATION #################################

    slave-serve-stale-data yes
    slave-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-disable-tcp-nodelay no

    ################################## SECURITY ###################################


    ################################### LIMITS ####################################

    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes

    ################################ LUA SCRIPTING  ###############################

    lua-time-limit 5000

    ################################ REDIS CLUSTER  ###############################

    ################################## SLOW LOG ###################################

    slowlog-log-slower-than 10000
    slowlog-max-len 128

    ################################ LATENCY MONITOR ##############################

    latency-monitor-threshold 0

    ############################# EVENT NOTIFICATION ##############################

    notify-keyspace-events ""

    ############################### ADVANCED CONFIG ###############################

    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    activerehashing yes

    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit slave 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10

    aof-rewrite-incremental-fsync yes

  k8s-redis-ha-sentinel: |
    #!/bin/bash

    set -eux


    apt update
    apt -y install curl
    curl -L https://github.com/tarosky/dig-a/releases/download/v1.0.1/dig-a_linux_amd64 > /bin/dig-a
    curl -L https://github.com/tarosky/dig-srv/releases/download/v1.0.0/dig-srv_linux_amd64 > /bin/dig-srv
    chmod +x /bin/dig-srv
    chmod +x /bin/dig-a

    namespace="$(< /var/run/secrets/kubernetes.io/serviceaccount/namespace)"
    readonly namespace
    readonly service_domain="_$SERVICE_PORT._tcp.$SERVICE.$namespace.svc"

    redis_info () {
      set +e
      timeout 10 redis-cli -h "$1" -a "$service_domain" info replication
      set -e
    }

    redis_info_role () {
      echo "$1" | grep -e '^role:' | cut -d':' -f2 | tr -d '[:space:]'
    }

    domain_ip () {
      /bin/dig-a "$1" | head -1 | awk '{print $NF}'
    }

    server_domains () {
      /bin/dig-srv "$1" | awk '{print $NF}' | sed 's/\.$//g'
    }

    run () {
      # It's okay to fail during failover or other unpredictable states.
      # This prevents from making things much worse.

      local servers
      servers="$(server_domains "$service_domain")"
      readonly servers

      local master_ip=''

      local s
      for s in $servers; do
        local s_ip
        s_ip="$(domain_ip "$s")"

        if [ -z "$s_ip" ]; then
          >&2 echo "Failed to resolve: $s"
          continue
        fi

        local i
        i="$(redis_info "$s_ip")"
        if [ -n "$i" ]; then
          if [ "$(redis_info_role "$i")" = 'master' ]; then
            master_ip="$s_ip"
          fi
        else
          >&2 echo "Unable to get Replication INFO: $s ($s_ip)"
          continue
        fi
      done

      if [ -z "$master_ip" ]; then
        >&2 echo "Master not found."
        exit 1
      fi

      < /opt/cfg/sentinel.template.conf sed "s/%MASTER%/$master_ip/g" | \
        sed "s/%PASSWORD%/$service_domain/g" > /opt/sentinel.conf
      exec docker-entrypoint.sh redis-sentinel "$@"
    }

    run "$@"
  k8s-redis-ha-server: |
    #!/bin/bash

    set -eux

    namespace="$(< /var/run/secrets/kubernetes.io/serviceaccount/namespace)"
    readonly namespace
    readonly service_domain="_$SERVICE_PORT._tcp.$SERVICE.$namespace.svc"
    readonly sentinel_domain="_$SENTINEL_PORT._tcp.$SENTINEL.$namespace.svc"

    redis_info () {
      set +e
      timeout 10 redis-cli -h "$1" -a "$service_domain" info replication
      set -e
    }

    reset_sentinel () {
      set +e
      timeout 10 redis-cli -h "$1" -p 26379 sentinel reset mymaster
      set -e
    }

    redis_info_role () {
      echo "$1" | grep -e '^role:' | cut -d':' -f2 | tr -d '[:space:]'
    }

    domain_ip () {
      /bin/dig-a "$1" | head -1 | awk '{print $NF}'
    }

    server_domains () {
      /bin/dig-srv "$1" | awk '{print $NF}' | sed 's/\.$//g'
    }

    # At the end of the (succeeded) script, resetting all sentinels is necessary.
    # This updates the list of supervised slaves.
    # If this task is omitted, the number of "supervised" slaves continues to
    # increase because sentinels are unable to recognize the recovered slave
    # is the same slave as the dead one.
    # Kubernetes may change Pod's IP address on restart.
    reset_all_sentinels () {
      local servers
      servers="$(server_domains "$sentinel_domain")"
      readonly servers
      local s
      >&2 echo "Resetting all sentinels: $servers"
      for s in $servers; do
        local s_ip
        s_ip="$(domain_ip "$s")"

        if [ -z "$s_ip" ]; then
          >&2 echo "Failed to resolve: $s"
          continue
        fi

        # Ignoring failed sentinels are allowed, since most of the sentinels are
        # expected to be alive.
        reset_sentinel "$s_ip"
      done
    }

    slave_priority () {
      local no
      no="$(hostname | awk -F- '{print $NF}')"
      readonly no
      local -r priority="$(((no + 1) * 10))"
      echo "slave-priority $priority"
    }

    # It's okay to fail during failover or other unpredictable states.
    # This prevents from making things much worse.
    run () {
      cp /opt/cfg/redis.template.conf /opt/redis.conf

      # Domain name of the Service is also used as the password.
      # In this case, password is just an ID to distinguish this replica set from
      # other ones in the same Kubernetes cluster.
      # {
      #   echo "masterauth $service_domain";
      #   echo "requirepass $service_domain";
      # } >> /opt/redis.conf

      # Replica with smaller number should be the preferred candidate for Master
      # over ones with larger number.
      # This is because replicas with larger number have higher chance of being
      # removed by reducing the number of replica in a StatefulSet.
      slave_priority >> /opt/redis.conf

      # Headless Service allows newly added Redis server to scan all working servers.
      # This enables it to find if it is the first one.
      local servers
      servers="$(server_domains "$service_domain")"
      readonly servers
      local my_host
      my_host="$(hostname -f)"
      readonly my_host

      local master_ip=''

      local only_server=true
      local s
      for s in $servers; do
        # My hostname must be excluded to handle restarts.
        if [ "$s" = "$my_host" ]; then
          continue
        fi

        only_server=false

        local s_ip
        s_ip="$(domain_ip "$s")"

        if [ -z "$s_ip" ]; then
          >&2 echo "Failed to resolve: $s"
          continue
        fi

        local i
        i="$(redis_info "$s_ip")"
        if [ -n "$i" ]; then
          if [ "$(redis_info_role "$i")" = 'master' ]; then
            master_ip="$s_ip"
          fi
        else
          >&2 echo "Unable to get Replication INFO: $s ($s_ip)"
          continue
        fi
      done

      if [ "$only_server" = true ]; then
        # This is an exceptional case: if this is the first server to start in the
        # replica, this must be run as Master.
        # Otherwise the StatefulSet will be unable to start.
        :
      else
        if [ -z "$master_ip" ]; then
          >&2 echo "Unable to start because all servers are slave."
          exit 1
        fi

        # Now the Master server has been found, this server will be launched as
        # the slave of the Master.
        echo "slaveof $master_ip 6379" >> /opt/redis.conf
      fi

      reset_all_sentinels
      exec docker-entrypoint.sh redis-server "$@"
    }

    run "$@"

